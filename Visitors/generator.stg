header() ::= <<
from midiutil import MIDIFile
from math import ceil
import sys
import copy
>>

createmidi(varbpm, vartrack) ::= <<
bpm = <varbpm>
midi = MIDIFile(numTracks=<vartrack>, file_format=1, deinterleave=False)
midi.addTempo(0,0,bpm)
noteoffset = -0.001
currchannel = 0
longest = 0
ch_inst = []
>>

body() ::= <<
def addnotes(notes):
    time = notes[0] #When the sequence will start time wise
    temp = -1
    global currchannel
    repeat_times = (int)(notes[len(notes)-1])

    for x in range(len(time)):
        initialTime = time[x] - duration(notes[1])
        for _ in range(repeat_times):
            initialTime += duration(notes[1])
            for i in range(0, len(notes[1])):
                try:
                    note = notes[1][i][0] #getting the note
                    noteDur = notes[1][i][1] #duration of the note
                    toInsert = notes[1][i][3] + initialTime
                    instrument = instrument = notes[1][i][2]
                    if note \< 0:
                        continue
                except:
                    pass

                if instrument != temp: #INSTRUMENT CHANGED, SWITCH CHANNEL NOW!!
                    currchannel = checkChannel(instrument)
                    midi.addProgramChange(1, currchannel, toInsert, instrument)
                    temp = instrument


                midi.addNote(1,currchannel,note,toInsert,noteDur,100)
                print("Added note {}, with instument {} with a duration of {} on time {}, on channel {}".format(note, instrument, noteDur, (toInsert*(85/bpm)), currchannel))


def checkChannel(instrument):
    global ch_inst
        
    if instrument == 119:
        try:
            if len(ch_inst) >= 16:
                raise ValueError
        except ValueError:
            print("MIDI does not Support over 16 instruments/channels")
            print("Dumping and quitting")
            exportfile()
            sys.exit(-1)
        if instrument not in ch_inst:
            ch_inst.append(instrument)
        return 10

    if len(ch_inst) == 0:
        ch_inst.append(instrument)
        return 0
    elif instrument in ch_inst:
        return ch_inst.index(instrument)
    elif instrument not in ch_inst:
        try:
            if len(ch_inst) >= 16:
                raise ValueError
        except ValueError:
            print("MIDI does not Support over 16 instruments/channels")
            print("Dumping and quitting")
            exportfile()
            sys.exit(-1)
        ch_inst.append(instrument)
        return ch_inst.index(instrument)



def getInt(varstr):
    while True:
        try:
            a = int(input(varstr))
        except ValueError:
            print("Please input a valid number")
            continue
        else:
            break
    return a

def duration(toCheck):
    if len(toCheck) == 0:
        return 0
    if type(toCheck[0]) is tuple:
        size = len(toCheck)-1
        return toCheck[0][3] + toCheck[size][3] + toCheck[size][1]
    else:
        if len(toCheck[1]) == 0:
            return 0
        size = len(toCheck[1]) - 1
        return toCheck[1][0][3] + toCheck[1][size][3] + toCheck[1][size][1]

def modPitch(toMod, ModNumber):
    modded = []
    if type(toMod[0]) is tuple:
        for tup in toMod:
            newPitch = tup[0] + ModNumber
            try:
                if newPitch \< 0:
                    raise ValueError
            except ValueError:
                print("Modulated note below 0, expect silence")
                pass
            newtup = (newPitch, tup[1],tup[2],tup[3])
            modded.append(newtup)
        return modded
    else:
        temp = copy.deepcopy(toMod)
        for tup in toMod[1]:
            newPitch = tup[0] + ModNumber
            try:
                if newPitch \< 0:
                    raise ValueError
            except ValueError:
                print("Modulated note below 0, expect silence")
                pass
            newtup = (newPitch, tup[1],tup[2],tup[3])
            modded.append(newtup)
        temp[1] = modded
        return temp


def modTempo(toMod, ModNumber):
    modded = []
    newInsert = 0
    prevOriginalInsert = -1
    if type(toMod[0]) is tuple:
        for tup in toMod:
            newTempo = tup[1] / ModNumber - noteoffset
            if prevOriginalInsert == tup[3]: # for chords
                newInsert -= newTempo
            newtup = (tup[0], newTempo,tup[2],newInsert)
            newInsert += newTempo
            prevOriginalInsert = tup[3]
            modded.append(newtup)
        return modded
    else:
        temp = copy.deepcopy(toMod)
        for tup in toMod[1]:
            newTempo = tup[1] / ModNumber - noteoffset
            if prevOriginalInsert == tup[3]: # for chords
                newInsert -= newTempo
            newtup = (tup[0], newTempo,tup[2],newInsert)
            newInsert += newTempo
            prevOriginalInsert = tup[3]
            modded.append(newtup)
        temp[1] = modded
        return temp

def extendseq(original, toextend):
    modded = []
    if len(original) == 0:
        for tup in toextend:
            newtup = (tup[0], tup[1], tup[2], 0)
            modded.append(newtup)
        return modded
    else:
        for tup in original:
            modded.append(tup)
        time = duration(original)
        for tup in toextend:
            newtup = (tup[0], tup[1], tup[2], time)
            modded.append(newtup)
        return modded

def appendseq(original, toappend):
    offsetTime = duration(original)
    for tup in toappend:
        newTime = offsetTime
        if tup[3] > 0:
            newtime += tup[3]
        newtup = (tup[0],tup[1],tup[2],newTime)
        original.append(newtup)
    return original

def setinstrument(seq,nome):
    if len(seq)==0:
        return seq
    newseq = []
    for tup in seq:
        new = (tup[0],tup[1],nome[tup[0]],tup[3])
        newseq.append(new)
    return newseq

def prepplay(perf):
    global longest #we want the global scope of this variable
    perf_duration = max(perf[0])+duration(perf[1]) * perf[2]
    if perf_duration > longest:
        longest = perf_duration
    return perf

def preploop(perf):
    global longest #we want the global scope of this variable
    repeats = longest/duration(perf[1])
    perf[2] = ceil(repeats)
    return perf

def offsetstart(perf, offset):
    originaltime = perf[0][0]
    perf[0] = offset
    for i in range(0,len(perf[0])):
        perf[0][i] += originaltime
    return perf

def exportfile(name):
    with open(name, 'wb') as file:
        midi.writeFile(file) #Writting the file
        print("MIDI File Written")
>>

exportfile(name) ::= <<
exportfile("<name>")
>>


vardec(indentation, varname, value) ::= <<
<indentation><varname> = <value>
>>

range(indentation, varname, first, last) ::= <<
<indentation><varname> = range(<first>, <last>+1)
>>

append(indentation, varname, toappend) ::= <<
<indentation><varname>.append(<toappend>)
>>

u_addnotes(indentation, varname) ::= <<
<indentation>addnotes(<varname>)
>>

u_getint(indentation, varname, str) ::= <<
<indentation><varname> = getInt(<str>)
>>

u_duration(indentation, varname, performance) ::= <<
<indentation><varname> = duration(<performance>)
>>

u_extendseq(indentation, varname, original, toextend) ::= <<
<indentation><varname> = extendseq(<original>, <toextend>)
>>
u_appendseq(indentation, varname, original, toappend) ::= <<
<indentation><varname> = appendseq(<original>, <toappend>)
>>

u_modPitch(indentation, varname, performance, modnumber) ::= <<
<indentation><varname> = modPitch(<performance>, <modnumber>)
>>

u_modTempo(indentation, varname, performance, modnumber) ::= <<
<indentation><varname> = modTempo(<performance>, <modnumber>)
>>

u_setinstrument(indentation, varname, seq, instrument) ::= <<
<indentation><varname> = setinstrument(<seq>, <instrument>)
>>

u_prepplay(indentation, varname) ::= <<
<indentation><varname> = prepplay(<varname>)
>>

u_preploop(indentation, varname) ::= <<
<indentation><varname> = preploop(<varname>)
>>

u_offsetstart(indentation, varname, performance, offset) ::= <<
<indentation><varname> = offsetstart(<performance>, <offset>)
>>

forloop(indentation, instance, array) ::= <<
<indentation>for <instance> in <array>:
>>

if(indentation, condition) ::= <<
<indentation>if <condition>:
>>

elif(indentation, condition) ::= <<
<indentation>elif <condition>:
>>

else(indentation, code) ::= <<
<indentation>else:
>>
